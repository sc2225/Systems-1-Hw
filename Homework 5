//Instructions: 
1. Solve Problem 3.63 in BO. You solution should be an implementation of C function switch_prob(). Verify your solution by typing it up and
compiling it on our class Linux VM 
        $ gcc -Og -o hw5 hw5.c and then viewing the generated assembly code using a disassembler:
        $ objdump -d hw5 | less
        
//Problem 3.63:
This problem will give you a chance to reverse engineer a switch statement from disassembled machine code. In the following procedure,
the body of the switch statement has been omitted:

00000000004004f0 <switch_prob>:
  400590:       48 83 ee 3c             sub    $0x3c,%rsi                  //0x3c == 60. %rsi = 60 - n; This is where we start numbering the cases
  400594:       48 83 fe 05             cmp    $0x5,%rsi                   // if 60 - n is ABOVE 5, we jump to default. The only cases left are 0,1,2,3,4,5.
  400598:       77 29                   ja     400523 <switch_prob+0x33>   //for default(When n is above 5), jump to 400523
  40059a:       ff 24 f5 c0 05 40 00    jmpq   *0x4005c0(,%rsi,8)         //jump table at 0x4005c0
  4005a1:       48 8d 04 fd 00 00 00    lea    0x0(,%rdi,8),%rax          //result = 8*x
  4005a8:       00 
  4005a9:       c3                      retq   
  4005aa:       48 89 f8                mov    %rdi,%rax                  //result = x
  4005ad:       48 c1 f8 03             sar    $0x3,%rax                  // result = result >> 3;
  4005b1:       c3                      retq   
  4005b2:       48 89 f8                mov    %rdi,%rax                  // result = x;
  4005b5:       48 c1 e0 04             shl    $0x4,%rax                  // result = result << 4;
  4005b9:       48 29 f8                sub    %rdi,%rax                  // result = result - x;
  4005bc:       48 89 c7                mov    %rax,%rdi                  // x = result
  4005bf:       48 0f af ff             imul   %rdi,%rdi                  // x = x*x
  4005c3:       48 8d 47 4b             lea    0x4b(%rdi),%rax      //default case: result = x + 75
  4005c7:       c3                      retq   

//Jump table:
(gdb) x/6gx 0x4006f8

0x4006f8:     0x00000000004005a1    0x00000000004005c3          //from this table, we can see we have a TOTAL of 6 cases, not including
0x400708:     0x00000000004005a1    0x00000000004005aa            any fall throughs or skipped cases. 
0x400718:     0x00000000004005b2    0x00000000004005bf

long switch_prob(long x, long n) {
      long result = x;
      switch(n) {
          /* fill in code here */
      }
      return result;
}

//Solution:
The jump table shows us the total number of cases we have for the switch statement. We can use the addresses to find where each case begins
in the assembly code. In addition, the cases go in order from top left to right. Any case that jumps to the default means it is SKIPPED
in the C code. The cases end with a "break" wherever there is a "retq" in the assembly code; otherwise, it is a fallthrough

long switch_prob(long x, long n) {
      long result = x;
      switch(n) {
        case 60: 
          result = 8 * x;
          break;
        case 62:              //case 61 is skipped because 0x4005c3 in jump table refers to default case == SKIPPED case
          result = 8 * x;    //Notice this has the same assembly code as case 60!
          break;
        case 63:
          result = x;
          result = result >> 3;
          break;
        case 64:
          result = x;
          result = result << 4;
          result = result - x;
          x = result;
        case 65:
          x = x*x;
         default:
            result = x + 75;
            
//Refining the solution from above:

long switch_prob(long x, long n) {
      long result = x;
      switch(n) {
        case 60:
        case 62:              
          result = 8 * x;    
          break;
        case 63:
          result = x;
          result = result >> 3;
          break;
        case 64:
          result = x;
          result = result << 4;
          result = result - x;
          x = result;
        case 65:
          x = x*x;
         default:
            result = x + 75;
